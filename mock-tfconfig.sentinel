import "strings"
import "types"

_modules = {
	"root": {
		"data":    {},
		"modules": {},
		"outputs": {},
		"providers": {
			"aws": {
				"alias": {
					"": {
						"config": {
							"profile": "default",
							"region":  "us-east-1",
						},
						"references": {
							"profile": [],
							"region":  [],
						},
						"version": "~> 3.70",
					},
					"mumbai": {
						"config": {
							"region": "ap-south-1",
						},
						"references": {
							"region": [],
						},
						"version": "~> 3.70",
					},
					"us-west": {
						"config": {
							"region": "us-west-1",
						},
						"references": {
							"region": [],
						},
						"version": "~> 3.70",
					},
				},
				"config": {
					"profile": "default",
					"region":  "us-east-1",
				},
				"references": {
					"profile": [],
					"region":  [],
				},
				"version": "~> 3.70",
			},
		},
		"resources": {
			"aws_instance": {
				"s3_ec21": {
					"config": {
						"instance_type": "t2.micro",
						"tags":          {},
					},
					"provisioners": null,
					"references": {
						"ami": [
							"each.value",
						],
						"instance_type": [],
						"tags":          [],
					},
				},
			},
		},
		"variables": {
			"env": {
				"default":     "Prod",
				"description": "The env for tags",
			},
		},
	},
}

module_paths = [
	[],
]

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
modules = _modules.root.modules
providers = _modules.root.providers
resources = _modules.root.resources
variables = _modules.root.variables
outputs = _modules.root.outputs
